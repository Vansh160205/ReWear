// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id            Int         @id @default(autoincrement())
  email         String      @unique
  password      String
  name          String
  isAdmin       Boolean     @default(false)
  points        Int         @default(0)
  items         Item[]      @relation("UserItems")
  swaps         Swap[]      @relation("UserSwaps")      // 2-way swaps initiated
  incomingSwaps Swap[]      @relation("IncomingSwaps")  // swaps received
  redemptions   Redemption[] // redemptions (used points)
  createdAt     DateTime    @default(now())
}
model Swap {
  id            Int      @id @default(autoincrement())
  itemId        Int
  requesterId   Int
  ownerId       Int
  offeredItemId Int?     // Optional item offered in exchange
  status        String   @default("pending") // pending, approved, rejected, completed
  createdAt     DateTime @default(now())

  item          Item     @relation("ItemSwaps", fields: [itemId], references: [id])
  requester     User     @relation("UserSwaps", fields: [requesterId], references: [id])
  owner         User     @relation("IncomingSwaps", fields: [ownerId], references: [id])
  offeredItem   Item?    @relation("OfferedItemSwaps", fields: [offeredItemId], references: [id])
}

model Item {
  id            Int      @id @default(autoincrement())
  title         String
  description   String
  category      String
  size          String
  condition     String
  status        String   @default("available") // available, pending, sold, redeemed
  tags          String[]
  images        String[]
  approved      Boolean  @default(false) // Admin approval required
  ownerId       Int
  owner         User     @relation("UserItems", fields: [ownerId], references: [id])
  swaps         Swap[]   @relation("ItemSwaps")
  offeredInSwaps Swap[]  @relation("OfferedItemSwaps") // âœ… inverse of offeredItem
  available     Boolean  @default(true)
  isRedeemable  Boolean  @default(false)
  pointsCost    Int?
  createdAt     DateTime @default(now())
  redemptions Redemption[] // inverse relation
}


model Redemption {
  id        Int      @id @default(autoincrement())
  itemId    Int
  userId    Int
  pointsUsed Int
  createdAt DateTime @default(now())

  item   Item @relation(fields: [itemId], references: [id])
  user   User @relation(fields: [userId], references: [id])
}
